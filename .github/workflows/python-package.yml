# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main", "development" ]
  pull_request:
    branches: [ "main", "development" ]

permissions:
  contents: write

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk xvfb
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install .
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        xvfb-run -a pytest

  bump-version:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.71.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch  # or minor, major
          WITH_V: true         # creates tags like v1.2.3
      
      - name: Extract version from latest Git tag
        id: extract_version
        run: |
          TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          VERSION="${TAG#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
            
      - name: Update pyproject.toml version
        run: |
          sed -i "s/^version = \".*\"/version = \"${{ steps.extract_version.outputs.version }}\"/" pyproject.toml
      
      - name: Commit updated pyproject.toml
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add pyproject.toml
          git commit -m "chore: update pyproject.toml to version ${{ steps.extract_version.outputs.version }}"
          git push origin main          